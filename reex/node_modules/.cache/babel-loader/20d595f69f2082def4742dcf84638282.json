{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\"; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  first_name,\n  last_name,\n  idNo,\n  role,\n  gender,\n  email,\n  phoneNumber,\n  address,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    idNo,\n    role,\n    gender,\n    email,\n    phoneNumber,\n    address,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //login User\n\nexport const login = (idNo, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    idNo,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/kova/Desktop/Receipt and Expense Managment System  /reex/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","first_name","last_name","idNo","role","gender","email","phoneNumber","address","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n} from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n//Register User\nexport const register = ({\n  first_name,\n  last_name,\n  idNo,\n  role,\n  gender,\n  email,\n  phoneNumber,\n  address,\n  password,\n}) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    idNo,\n    role,\n    gender,\n    email,\n    phoneNumber,\n    address,\n    password,\n  });\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n//login User\nexport const login = (idNo, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({\n    idNo,\n    password,\n  });\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({ type: LOGIN_SUCCESS, payload: res.data });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}